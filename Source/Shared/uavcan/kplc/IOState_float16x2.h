/*
 * UAVCAN data structure definition for libcanard.
 *
 * Autogenerated, do not edit.
 *
 * Source file: C:\Sources\UAVCAN-dsdl\uavcan\kplc\202.IOState_float16x2.uavcan
 */

#ifndef __KPLC_IOSTATE_FLOAT16X2
#define __KPLC_IOSTATE_FLOAT16X2

#include <stdint.h>
#include "canard.h"

#ifdef __cplusplus
extern "C"
{
#endif

/******************************* Source text **********************************
#
# KPLC IO State, float16x2
#

saturated float16 field1
saturated float16 field2

---

uint8 STATUS_OK = 0
uint8 STATUS_ERROR_INCONSISTENCY = 1
uint8 STATUS_ERROR_UNKNOWN = 2

uint8 status
******************************************************************************/

/********************* DSDL signature source definition ***********************
kplc.IOState_float16x2
saturated float16 field1
saturated float16 field2
---
saturated uint8 status
******************************************************************************/

#define KPLC_IOSTATE_FLOAT16X2_ID                          202
#define KPLC_IOSTATE_FLOAT16X2_NAME                        "kplc.IOState_float16x2"
#define KPLC_IOSTATE_FLOAT16X2_SIGNATURE                   (0x76460CC98F940AULL)

#define KPLC_IOSTATE_FLOAT16X2_REQUEST_MAX_SIZE            ((32 + 7)/8)

// Constants

typedef struct
{
    // FieldTypes
    float      field1;                        // float16 Saturate
    float      field2;                        // float16 Saturate

} kplc_IOState_float16x2Request;

extern
uint32_t kplc_IOState_float16x2Request_encode(kplc_IOState_float16x2Request* source, void* msg_buf);

extern
int32_t kplc_IOState_float16x2Request_decode(const CanardRxTransfer* transfer, uint16_t payload_len, kplc_IOState_float16x2Request* dest, uint8_t** dyn_arr_buf);

extern
uint32_t kplc_IOState_float16x2Request_encode_internal(kplc_IOState_float16x2Request* source, void* msg_buf, uint32_t offset, uint8_t root_item);

extern
int32_t kplc_IOState_float16x2Request_decode_internal(const CanardRxTransfer* transfer, uint16_t payload_len, kplc_IOState_float16x2Request* dest, uint8_t** dyn_arr_buf, int32_t offset);

#define KPLC_IOSTATE_FLOAT16X2_RESPONSE_MAX_SIZE           ((8 + 7)/8)

// Constants
#define KPLC_IOSTATE_FLOAT16X2_RESPONSE_STATUS_OK                             0 // 0
#define KPLC_IOSTATE_FLOAT16X2_RESPONSE_STATUS_ERROR_INCONSISTENCY            1 // 1
#define KPLC_IOSTATE_FLOAT16X2_RESPONSE_STATUS_ERROR_UNKNOWN                  2 // 2

typedef struct
{
    // FieldTypes
    uint8_t    status;                        // bit len 8

} kplc_IOState_float16x2Response;

extern
uint32_t kplc_IOState_float16x2Response_encode(kplc_IOState_float16x2Response* source, void* msg_buf);

extern
int32_t kplc_IOState_float16x2Response_decode(const CanardRxTransfer* transfer, uint16_t payload_len, kplc_IOState_float16x2Response* dest, uint8_t** dyn_arr_buf);

extern
uint32_t kplc_IOState_float16x2Response_encode_internal(kplc_IOState_float16x2Response* source, void* msg_buf, uint32_t offset, uint8_t root_item);

extern
int32_t kplc_IOState_float16x2Response_decode_internal(const CanardRxTransfer* transfer, uint16_t payload_len, kplc_IOState_float16x2Response* dest, uint8_t** dyn_arr_buf, int32_t offset);

#ifdef __cplusplus
} // extern "C"
#endif
#endif // __KPLC_IOSTATE_FLOAT16X2