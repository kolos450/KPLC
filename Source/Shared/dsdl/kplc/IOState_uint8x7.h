/*
 * UAVCAN data structure definition for libcanard.
 *
 * Autogenerated, do not edit.
 *
 * Source file: C:\Docs\Repo\dsdl\kplc\203.IOState_uint8x7.uavcan
 */

#ifndef __KPLC_IOSTATE_UINT8X7
#define __KPLC_IOSTATE_UINT8X7

#include <stdint.h>
#include "canard.h"

#ifdef __cplusplus
extern "C"
{
#endif

/******************************* Source text **********************************
#
# KPLC IO State
#

uint8[7] state

---

uint8 STATUS_OK = 0
uint8 STATUS_ERROR_INCONSISTENCY = 1
uint8 STATUS_ERROR_UNKNOWN = 2

uint8 status
******************************************************************************/

/********************* DSDL signature source definition ***********************
kplc.IOState_uint8x7
saturated uint8[7] state
---
saturated uint8 status
******************************************************************************/

#define KPLC_IOSTATE_UINT8X7_ID                            203
#define KPLC_IOSTATE_UINT8X7_NAME                          "kplc.IOState_uint8x7"
#define KPLC_IOSTATE_UINT8X7_SIGNATURE                     (0x3777FB7A35F3AE5AULL)

#define KPLC_IOSTATE_UINT8X7_REQUEST_MAX_SIZE              ((56 + 7)/8)

// Constants

#define KPLC_IOSTATE_UINT8X7_REQUEST_STATE_LENGTH                                        7

typedef struct
{
    // FieldTypes
    uint8_t    state[7];                      // Static Array 8bit[7] max items

} kplc_IOState_uint8x7Request;

extern
uint32_t kplc_IOState_uint8x7Request_encode(kplc_IOState_uint8x7Request* source, void* msg_buf);

extern
int32_t kplc_IOState_uint8x7Request_decode(const CanardRxTransfer* transfer, uint16_t payload_len, kplc_IOState_uint8x7Request* dest, uint8_t** dyn_arr_buf);

extern
uint32_t kplc_IOState_uint8x7Request_encode_internal(kplc_IOState_uint8x7Request* source, void* msg_buf, uint32_t offset, uint8_t root_item);

extern
int32_t kplc_IOState_uint8x7Request_decode_internal(const CanardRxTransfer* transfer, uint16_t payload_len, kplc_IOState_uint8x7Request* dest, uint8_t** dyn_arr_buf, int32_t offset);

#define KPLC_IOSTATE_UINT8X7_RESPONSE_MAX_SIZE             ((8 + 7)/8)

// Constants
#define KPLC_IOSTATE_UINT8X7_RESPONSE_STATUS_OK                               0 // 0
#define KPLC_IOSTATE_UINT8X7_RESPONSE_STATUS_ERROR_INCONSISTENCY              1 // 1
#define KPLC_IOSTATE_UINT8X7_RESPONSE_STATUS_ERROR_UNKNOWN                    2 // 2

typedef struct
{
    // FieldTypes
    uint8_t    status;                        // bit len 8

} kplc_IOState_uint8x7Response;

extern
uint32_t kplc_IOState_uint8x7Response_encode(kplc_IOState_uint8x7Response* source, void* msg_buf);

extern
int32_t kplc_IOState_uint8x7Response_decode(const CanardRxTransfer* transfer, uint16_t payload_len, kplc_IOState_uint8x7Response* dest, uint8_t** dyn_arr_buf);

extern
uint32_t kplc_IOState_uint8x7Response_encode_internal(kplc_IOState_uint8x7Response* source, void* msg_buf, uint32_t offset, uint8_t root_item);

extern
int32_t kplc_IOState_uint8x7Response_decode_internal(const CanardRxTransfer* transfer, uint16_t payload_len, kplc_IOState_uint8x7Response* dest, uint8_t** dyn_arr_buf, int32_t offset);

#ifdef __cplusplus
} // extern "C"
#endif
#endif // __KPLC_IOSTATE_UINT8X7