/*
 * UAVCAN data structure definition for libcanard.
 *
 * Autogenerated, do not edit.
 *
 * Source file: C:\Docs\Repo\dsdl\kplc\202.IOStateFrame.uavcan
 */

#ifndef __KPLC_IOSTATEFRAME
#define __KPLC_IOSTATEFRAME

#include <stdint.h>
#include "canard.h"

#ifdef __cplusplus
extern "C"
{
#endif

/******************************* Source text **********************************
#
# KPLC IO State Frame
#

uint8 frameIndex
uint8[<=5] data

---

uint8 STATUS_OK = 0
uint8 STATUS_ERROR_INCONSISTENCY = 1
uint8 STATUS_ERROR_UNKNOWN = 2

uint8 status
******************************************************************************/

/********************* DSDL signature source definition ***********************
kplc.IOStateFrame
saturated uint8 frameIndex
saturated uint8[<=5] data
---
saturated uint8 status
******************************************************************************/

#define KPLC_IOSTATEFRAME_ID                               202
#define KPLC_IOSTATEFRAME_NAME                             "kplc.IOStateFrame"
#define KPLC_IOSTATEFRAME_SIGNATURE                        (0xAA2AB603B8846BDDULL)

#define KPLC_IOSTATEFRAME_REQUEST_MAX_SIZE                 ((51 + 7)/8)

// Constants

#define KPLC_IOSTATEFRAME_REQUEST_DATA_MAX_LENGTH                                        5

typedef struct
{
    // FieldTypes
    uint8_t    frameIndex;                    // bit len 8
    struct
    {
        uint8_t    len;                       // Dynamic array length
        uint8_t*   data;                      // Dynamic Array 8bit[5] max items
    } data;

} kplc_IOStateFrameRequest;

extern
uint32_t kplc_IOStateFrameRequest_encode(kplc_IOStateFrameRequest* source, void* msg_buf);

extern
int32_t kplc_IOStateFrameRequest_decode(const CanardRxTransfer* transfer, uint16_t payload_len, kplc_IOStateFrameRequest* dest, uint8_t** dyn_arr_buf);

extern
uint32_t kplc_IOStateFrameRequest_encode_internal(kplc_IOStateFrameRequest* source, void* msg_buf, uint32_t offset, uint8_t root_item);

extern
int32_t kplc_IOStateFrameRequest_decode_internal(const CanardRxTransfer* transfer, uint16_t payload_len, kplc_IOStateFrameRequest* dest, uint8_t** dyn_arr_buf, int32_t offset);

#define KPLC_IOSTATEFRAME_RESPONSE_MAX_SIZE                ((8 + 7)/8)

// Constants
#define KPLC_IOSTATEFRAME_RESPONSE_STATUS_OK                                  0 // 0
#define KPLC_IOSTATEFRAME_RESPONSE_STATUS_ERROR_INCONSISTENCY                 1 // 1
#define KPLC_IOSTATEFRAME_RESPONSE_STATUS_ERROR_UNKNOWN                       2 // 2

typedef struct
{
    // FieldTypes
    uint8_t    status;                        // bit len 8

} kplc_IOStateFrameResponse;

extern
uint32_t kplc_IOStateFrameResponse_encode(kplc_IOStateFrameResponse* source, void* msg_buf);

extern
int32_t kplc_IOStateFrameResponse_decode(const CanardRxTransfer* transfer, uint16_t payload_len, kplc_IOStateFrameResponse* dest, uint8_t** dyn_arr_buf);

extern
uint32_t kplc_IOStateFrameResponse_encode_internal(kplc_IOStateFrameResponse* source, void* msg_buf, uint32_t offset, uint8_t root_item);

extern
int32_t kplc_IOStateFrameResponse_decode_internal(const CanardRxTransfer* transfer, uint16_t payload_len, kplc_IOStateFrameResponse* dest, uint8_t** dyn_arr_buf, int32_t offset);

#ifdef __cplusplus
} // extern "C"
#endif
#endif // __KPLC_IOSTATEFRAME